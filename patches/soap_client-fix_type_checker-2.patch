diff --git a/src/Phpro/SoapClient/CodeGenerator/Assembler/FluentSetterAssembler.php b/src/Phpro/SoapClient/CodeGenerator/Assembler/FluentSetterAssembler.php
index 09851c1..b05b525 100644
--- a/src/Phpro/SoapClient/CodeGenerator/Assembler/FluentSetterAssembler.php
+++ b/src/Phpro/SoapClient/CodeGenerator/Assembler/FluentSetterAssembler.php
@@ -4,9 +4,7 @@ namespace Phpro\SoapClient\CodeGenerator\Assembler;
 
 use Phpro\SoapClient\CodeGenerator\Context\ContextInterface;
 use Phpro\SoapClient\CodeGenerator\Context\PropertyContext;
-use Phpro\SoapClient\CodeGenerator\Model\Property;
 use Phpro\SoapClient\CodeGenerator\Util\Normalizer;
-use Phpro\SoapClient\CodeGenerator\Util\TypeChecker;
 use Phpro\SoapClient\CodeGenerator\LaminasCodeFactory\DocBlockGeneratorFactory;
 use Phpro\SoapClient\Exception\AssemblerException;
 use Laminas\Code\Generator\MethodGenerator;
@@ -50,11 +48,15 @@ class FluentSetterAssembler implements AssemblerInterface
         $class = $context->getClass();
         $property = $context->getProperty();
         try {
+            $parameterOptions = ['name' => $property->getName()];
+            if ($this->options->useTypeHints()) {
+                $parameterOptions['type'] = $property->getCodeReturnType();
+            }
             $methodName = Normalizer::generatePropertyMethod('set', $property->getName());
             $class->removeMethod($methodName);
 
             $methodGenerator = new MethodGenerator($methodName);
-            $methodGenerator->setParameters($this->getParameter($property));
+            $methodGenerator->setParameters([$parameterOptions]);
             $methodGenerator->setVisibility(MethodGenerator::VISIBILITY_PUBLIC);
             $methodGenerator->setBody(sprintf(
                 '$this->%1$s = $%1$s;%2$sreturn $this;',
@@ -83,24 +85,4 @@ class FluentSetterAssembler implements AssemblerInterface
             throw AssemblerException::fromException($e);
         }
     }
-
-    /**
-     * @param Property $property
-     *
-     * @return array
-     */
-    private function getParameter(Property $property): array
-    {
-        $type = $property->getType();
-        if (TypeChecker::isKnownType($type) && $this->options->useTypeHints()) {
-            return [
-                [
-                    'name' => $property->getName(),
-                    'type' => $type,
-                ],
-            ];
-        }
-
-        return [$property->getName()];
-    }
 }
diff --git a/src/Phpro/SoapClient/CodeGenerator/Util/TypeChecker.php b/src/Phpro/SoapClient/CodeGenerator/Util/TypeChecker.php
index d3c4eed..933c8f6 100644
--- a/src/Phpro/SoapClient/CodeGenerator/Util/TypeChecker.php
+++ b/src/Phpro/SoapClient/CodeGenerator/Util/TypeChecker.php
@@ -25,7 +25,7 @@ class TypeChecker
      */
     public static function isKnownType(string $type): bool
     {
-        return self::isInternalPhpType($type) || self::isClassType($type);
+        return self::isInternalPhpType($type);
     }
 
     /**
@@ -37,16 +37,4 @@ class TypeChecker
     {
         return in_array(strtolower($type), self::$internalPhpTypes, true);
     }
-
-    /**
-     * @param string $type
-     *
-     * @return bool
-     */
-    private static function isClassType(string $type): bool
-    {
-        //todo add check for available classes
-
-        return false;
-    }
 }
diff --git a/test/PhproTest/SoapClient/Unit/CodeGenerator/Assembler/FluentSetterAssemblerTest.php b/test/PhproTest/SoapClient/Unit/CodeGenerator/Assembler/FluentSetterAssemblerTest.php
index 8e465b8..b3eb049 100644
--- a/test/PhproTest/SoapClient/Unit/CodeGenerator/Assembler/FluentSetterAssemblerTest.php
+++ b/test/PhproTest/SoapClient/Unit/CodeGenerator/Assembler/FluentSetterAssemblerTest.php
@@ -130,7 +130,7 @@ CODE;
     /**
      * @test
      */
-    function it_assembles_a_property_with_an_unkown_type()
+    function it_assembles_a_property_with_class_type()
     {
         $assembler = new FluentSetterAssembler((new FluentSetterAssemblerOptions())->withTypeHints());
         $context = $this->createContextWithAnUnknownType();
@@ -146,7 +146,7 @@ class MyType
      * @param \\MyNamespace\\Foobar \$prop1
      * @return \$this
      */
-    public function setProp1(\$prop1)
+    public function setProp1(\\MyNamespace\\Foobar \$prop1)
     {
         \$this->prop1 = \$prop1;
         return \$this;
